[project]
name = "zarr-utils"
version = "0.1.0"
description = "Utilities for inspecting, wrapping, and exporting Zarr datasets"
authors = [
    { name = "Abhishek Yenpure" }
]
dependencies = [
    "xarray",
    "zarr",
    "numpy",
    "fsspec",
    "s3fs",
    "dask",
    "vtk",         # optional: for to_vti / to_vtk
    "pyvista"
]
requires-python = ">=3.9"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["Python", "Zarr", "Utilities", "Framework"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.optional-dependencies]
dev = [
    "pytest >=6",
    "pytest-cov",
    "pytest-xdist",  # parallel test execution
    "pre-commit",
    "ruff",
    "mypy",
    "types-requests",
]

viz = [
    "vtk",
    "pyvista",
]

docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.24",
    "pymdown-extensions>=10.0",
]

all = [
    "zarr-utils[dev,viz,docs]",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
  "zarr_utils/**/*.py"
]

[tool.hatch.build.targets.wheel]
packages = [
    "zarr_utils",
]

[tool.semantic_release]
version_variables = [
    "zarr_utils/__init__.py:__version__",
]
version_toml = [
    "pyproject.toml:project.version",
]
branch = "main"
upload_to_pypi = false  # We use GitHub Actions for this
upload_to_release = true
build_command = "pip install build && python -m build"
commit_message = "chore(release): {version} [skip ci]\n\n{changelog}"
commit_parser = "angular"
changelog_file = "CHANGELOG.md"
changelog_sections = [
    {type = "feat", section = "Features"},
    {type = "fix", section = "Bug Fixes"},
    {type = "docs", section = "Documentation"},
    {type = "style", section = "Style"},
    {type = "refactor", section = "Code Refactoring"},
    {type = "perf", section = "Performance Improvements"},
    {type = "test", section = "Tests"},
    {type = "build", section = "Build System"},
    {type = "ci", section = "Continuous Integration"},
]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # allow assert in tests

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "zarr.*",
    "fsspec.*",
    "vtk.*",
    "dask.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["zarr_utils"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.uv]
dev-dependencies = [
  "zarr_utils[dev]",
]
